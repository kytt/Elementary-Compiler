Terminals unused in grammar

   UNK


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input line

    3 line: '\n'
    4     | assign ';'
    5     | print ';'
    6     | println ';'
    7     | if
    8     | loop

    9 exp: NUM
   10    | REG
   11    | exp '+' exp
   12    | exp '-' exp
   13    | exp '*' exp
   14    | exp '/' exp
   15    | exp '\\' exp
   16    | '-' exp
   17    | '(' exp ')'

   18 assign: REG '=' exp

   19 print: PRINT '(' exp ',' "dec" ')'
   20      | PRINT '(' exp ',' "hex" ')'
   21      | PRINT '(' STRING ')'

   22 println: PRINTLN '(' exp ',' "dec" ')'
   23        | PRINTLN '(' exp ',' "hex" ')'
   24        | PRINTLN '(' STRING ')'

   25 if: IF '(' exp ',' exp ')' '{' stmt '}'

   26 stmt: %empty
   27     | line

   28 loop: LOOP '(' exp ',' exp ')' '{' stmt '}'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 3
'(' (40) 17 19 20 21 22 23 24 25 28
')' (41) 17 19 20 21 22 23 24 25 28
'*' (42) 13
'+' (43) 11
',' (44) 19 20 22 23 25 28
'-' (45) 12 16
'/' (47) 14
';' (59) 4 5 6
'=' (61) 18
'\\' (92) 15
'{' (123) 25 28
'}' (125) 25 28
error (256)
NUM (258) 9
REG (259) 10 18
UNK (260)
PRINT (261) 19 20 21
PRINTLN (262) 22 23 24
IF (263) 25
LOOP (264) 28
STRING (265) 21 24
NEG (266)
"dec" (267) 19 22
"hex" (268) 20 23


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
input (28)
    on left: 1 2, on right: 0 2
line (29)
    on left: 3 4 5 6 7 8, on right: 2 27
exp (30)
    on left: 9 10 11 12 13 14 15 16 17, on right: 11 12 13 14 15 16
    17 18 19 20 22 23 25 28
assign (31)
    on left: 18, on right: 4
print (32)
    on left: 19 20 21, on right: 5
println (33)
    on left: 22 23 24, on right: 6
if (34)
    on left: 25, on right: 7
stmt (35)
    on left: 26 27, on right: 25 28
loop (36)
    on left: 28, on right: 8


State 0

    0 $accept: . input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . line

    $end     shift, and go to state 2
    REG      shift, and go to state 3
    PRINT    shift, and go to state 4
    PRINTLN  shift, and go to state 5
    IF       shift, and go to state 6
    LOOP     shift, and go to state 7
    '\n'     shift, and go to state 8

    line     go to state 9
    assign   go to state 10
    print    go to state 11
    println  go to state 12
    if       go to state 13
    loop     go to state 14


State 2

    0 $accept: input $end .

    $default  accept


State 3

   18 assign: REG . '=' exp

    '='  shift, and go to state 15


State 4

   19 print: PRINT . '(' exp ',' "dec" ')'
   20      | PRINT . '(' exp ',' "hex" ')'
   21      | PRINT . '(' STRING ')'

    '('  shift, and go to state 16


State 5

   22 println: PRINTLN . '(' exp ',' "dec" ')'
   23        | PRINTLN . '(' exp ',' "hex" ')'
   24        | PRINTLN . '(' STRING ')'

    '('  shift, and go to state 17


State 6

   25 if: IF . '(' exp ',' exp ')' '{' stmt '}'

    '('  shift, and go to state 18


State 7

   28 loop: LOOP . '(' exp ',' exp ')' '{' stmt '}'

    '('  shift, and go to state 19


State 8

    3 line: '\n' .

    $default  reduce using rule 3 (line)


State 9

    2 input: input line .

    $default  reduce using rule 2 (input)


State 10

    4 line: assign . ';'

    ';'  shift, and go to state 20


State 11

    5 line: print . ';'

    ';'  shift, and go to state 21


State 12

    6 line: println . ';'

    ';'  shift, and go to state 22


State 13

    7 line: if .

    $default  reduce using rule 7 (line)


State 14

    8 line: loop .

    $default  reduce using rule 8 (line)


State 15

   18 assign: REG '=' . exp

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 27


State 16

   19 print: PRINT '(' . exp ',' "dec" ')'
   20      | PRINT '(' . exp ',' "hex" ')'
   21      | PRINT '(' . STRING ')'

    NUM     shift, and go to state 23
    REG     shift, and go to state 24
    STRING  shift, and go to state 28
    '-'     shift, and go to state 25
    '('     shift, and go to state 26

    exp  go to state 29


State 17

   22 println: PRINTLN '(' . exp ',' "dec" ')'
   23        | PRINTLN '(' . exp ',' "hex" ')'
   24        | PRINTLN '(' . STRING ')'

    NUM     shift, and go to state 23
    REG     shift, and go to state 24
    STRING  shift, and go to state 30
    '-'     shift, and go to state 25
    '('     shift, and go to state 26

    exp  go to state 31


State 18

   25 if: IF '(' . exp ',' exp ')' '{' stmt '}'

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 32


State 19

   28 loop: LOOP '(' . exp ',' exp ')' '{' stmt '}'

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 33


State 20

    4 line: assign ';' .

    $default  reduce using rule 4 (line)


State 21

    5 line: print ';' .

    $default  reduce using rule 5 (line)


State 22

    6 line: println ';' .

    $default  reduce using rule 6 (line)


State 23

    9 exp: NUM .

    $default  reduce using rule 9 (exp)


State 24

   10 exp: REG .

    $default  reduce using rule 10 (exp)


State 25

   16 exp: '-' . exp

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 34


State 26

   17 exp: '(' . exp ')'

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 35


State 27

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   18 assign: REG '=' exp .

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40

    $default  reduce using rule 18 (assign)


State 28

   21 print: PRINT '(' STRING . ')'

    ')'  shift, and go to state 41


State 29

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   19 print: PRINT '(' exp . ',' "dec" ')'
   20      | PRINT '(' exp . ',' "hex" ')'

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40
    ','   shift, and go to state 42


State 30

   24 println: PRINTLN '(' STRING . ')'

    ')'  shift, and go to state 43


State 31

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   22 println: PRINTLN '(' exp . ',' "dec" ')'
   23        | PRINTLN '(' exp . ',' "hex" ')'

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40
    ','   shift, and go to state 44


State 32

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   25 if: IF '(' exp . ',' exp ')' '{' stmt '}'

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40
    ','   shift, and go to state 45


State 33

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   28 loop: LOOP '(' exp . ',' exp ')' '{' stmt '}'

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40
    ','   shift, and go to state 46


State 34

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   16    | '-' exp .

    $default  reduce using rule 16 (exp)


State 35

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   17    | '(' exp . ')'

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40
    ')'   shift, and go to state 47


State 36

   12 exp: exp '-' . exp

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 48


State 37

   11 exp: exp '+' . exp

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 49


State 38

   13 exp: exp '*' . exp

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 50


State 39

   14 exp: exp '/' . exp

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 51


State 40

   15 exp: exp '\\' . exp

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 52


State 41

   21 print: PRINT '(' STRING ')' .

    $default  reduce using rule 21 (print)


State 42

   19 print: PRINT '(' exp ',' . "dec" ')'
   20      | PRINT '(' exp ',' . "hex" ')'

    "dec"  shift, and go to state 53
    "hex"  shift, and go to state 54


State 43

   24 println: PRINTLN '(' STRING ')' .

    $default  reduce using rule 24 (println)


State 44

   22 println: PRINTLN '(' exp ',' . "dec" ')'
   23        | PRINTLN '(' exp ',' . "hex" ')'

    "dec"  shift, and go to state 55
    "hex"  shift, and go to state 56


State 45

   25 if: IF '(' exp ',' . exp ')' '{' stmt '}'

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 57


State 46

   28 loop: LOOP '(' exp ',' . exp ')' '{' stmt '}'

    NUM  shift, and go to state 23
    REG  shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exp  go to state 58


State 47

   17 exp: '(' exp ')' .

    $default  reduce using rule 17 (exp)


State 48

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   12    | exp '-' exp .
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp

    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40

    $default  reduce using rule 12 (exp)


State 49

   11 exp: exp . '+' exp
   11    | exp '+' exp .
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp

    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40

    $default  reduce using rule 11 (exp)


State 50

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   13    | exp '*' exp .
   14    | exp . '/' exp
   15    | exp . '\\' exp

    $default  reduce using rule 13 (exp)


State 51

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   14    | exp '/' exp .
   15    | exp . '\\' exp

    $default  reduce using rule 14 (exp)


State 52

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   15    | exp '\\' exp .

    $default  reduce using rule 15 (exp)


State 53

   19 print: PRINT '(' exp ',' "dec" . ')'

    ')'  shift, and go to state 59


State 54

   20 print: PRINT '(' exp ',' "hex" . ')'

    ')'  shift, and go to state 60


State 55

   22 println: PRINTLN '(' exp ',' "dec" . ')'

    ')'  shift, and go to state 61


State 56

   23 println: PRINTLN '(' exp ',' "hex" . ')'

    ')'  shift, and go to state 62


State 57

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   25 if: IF '(' exp ',' exp . ')' '{' stmt '}'

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40
    ')'   shift, and go to state 63


State 58

   11 exp: exp . '+' exp
   12    | exp . '-' exp
   13    | exp . '*' exp
   14    | exp . '/' exp
   15    | exp . '\\' exp
   28 loop: LOOP '(' exp ',' exp . ')' '{' stmt '}'

    '-'   shift, and go to state 36
    '+'   shift, and go to state 37
    '*'   shift, and go to state 38
    '/'   shift, and go to state 39
    '\\'  shift, and go to state 40
    ')'   shift, and go to state 64


State 59

   19 print: PRINT '(' exp ',' "dec" ')' .

    $default  reduce using rule 19 (print)


State 60

   20 print: PRINT '(' exp ',' "hex" ')' .

    $default  reduce using rule 20 (print)


State 61

   22 println: PRINTLN '(' exp ',' "dec" ')' .

    $default  reduce using rule 22 (println)


State 62

   23 println: PRINTLN '(' exp ',' "hex" ')' .

    $default  reduce using rule 23 (println)


State 63

   25 if: IF '(' exp ',' exp ')' . '{' stmt '}'

    '{'  shift, and go to state 65


State 64

   28 loop: LOOP '(' exp ',' exp ')' . '{' stmt '}'

    '{'  shift, and go to state 66


State 65

   25 if: IF '(' exp ',' exp ')' '{' . stmt '}'

    REG      shift, and go to state 3
    PRINT    shift, and go to state 4
    PRINTLN  shift, and go to state 5
    IF       shift, and go to state 6
    LOOP     shift, and go to state 7
    '\n'     shift, and go to state 8

    $default  reduce using rule 26 (stmt)

    line     go to state 67
    assign   go to state 10
    print    go to state 11
    println  go to state 12
    if       go to state 13
    stmt     go to state 68
    loop     go to state 14


State 66

   28 loop: LOOP '(' exp ',' exp ')' '{' . stmt '}'

    REG      shift, and go to state 3
    PRINT    shift, and go to state 4
    PRINTLN  shift, and go to state 5
    IF       shift, and go to state 6
    LOOP     shift, and go to state 7
    '\n'     shift, and go to state 8

    $default  reduce using rule 26 (stmt)

    line     go to state 67
    assign   go to state 10
    print    go to state 11
    println  go to state 12
    if       go to state 13
    stmt     go to state 69
    loop     go to state 14


State 67

   27 stmt: line .

    $default  reduce using rule 27 (stmt)


State 68

   25 if: IF '(' exp ',' exp ')' '{' stmt . '}'

    '}'  shift, and go to state 70


State 69

   28 loop: LOOP '(' exp ',' exp ')' '{' stmt . '}'

    '}'  shift, and go to state 71


State 70

   25 if: IF '(' exp ',' exp ')' '{' stmt '}' .

    $default  reduce using rule 25 (if)


State 71

   28 loop: LOOP '(' exp ',' exp ')' '{' stmt '}' .

    $default  reduce using rule 28 (loop)
